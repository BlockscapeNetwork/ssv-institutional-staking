import { PayloadAction } from '@reduxjs/toolkit';
export declare enum KYCFieldType {
    ADDRESS_LINE_1 = "address1",
    ADDRESS_LINE_2 = "address2",
    FIRST_NAME = "firstName",
    LAST_NAME = "lastName",
    CITY = "city",
    PROVINCE = "province",
    ZIP = "zip",
    COUNTRY = "country"
}
export interface KYCFormSingleUpdatePayload {
    type: KYCFieldType;
    value: string;
}
export interface KYCFormMultiUpdatePayload {
    address1: string;
    address2: string;
    city: string;
    zip: string;
    province: string;
    firstName: string;
    lastName: string;
    dateOfBirth: string;
}
export declare const slice: import("@reduxjs/toolkit").Slice<{
    formFieldTypes: KYCFieldType[];
    formValues: {
        address1: string;
        address2: string;
        city: string;
        zip: string;
        province: string;
        firstName: string;
        lastName: string;
    };
    formErrors: {
        address1: string;
        address2: string;
        city: string;
        zip: string;
        province: string;
        firstName: string;
        lastName: string;
    };
    submitting: boolean;
    submittedSuccessfully: boolean;
}, {
    updateKYCFormFieldTypes: (state: import("immer/dist/internal").WritableDraft<{
        formFieldTypes: KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    }>, action: PayloadAction<KYCFieldType[]>) => void;
    updateKYCFormValue: (state: import("immer/dist/internal").WritableDraft<{
        formFieldTypes: KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    }>, action: PayloadAction<KYCFormSingleUpdatePayload>) => void;
    multiUpdateKYCForm: (state: import("immer/dist/internal").WritableDraft<{
        formFieldTypes: KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    }>, action: PayloadAction<KYCFormMultiUpdatePayload>) => void;
    clearCountry: (state: import("immer/dist/internal").WritableDraft<{
        formFieldTypes: KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    }>) => void;
    submittedSuccessfully: (state: import("immer/dist/internal").WritableDraft<{
        formFieldTypes: KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    }>) => void;
    submittingFailed: (state: import("immer/dist/internal").WritableDraft<{
        formFieldTypes: KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    }>) => void;
    submitting: (state: import("immer/dist/internal").WritableDraft<{
        formFieldTypes: KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    }>) => void;
    clearKYCFormSlice: (state: import("immer/dist/internal").WritableDraft<{
        formFieldTypes: KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    }>) => void;
    setKYCFormError: (state: import("immer/dist/internal").WritableDraft<{
        formFieldTypes: KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    }>, action: PayloadAction<KYCFormSingleUpdatePayload>) => void;
    reset: (state: import("immer/dist/internal").WritableDraft<{
        formFieldTypes: KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    }>) => import("immer/dist/internal").WritableDraft<{
        formFieldTypes: KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    }>;
}, "KYCFormSlice">;
export declare const updateKYCFormFieldTypes: import("@reduxjs/toolkit").ActionCreatorWithPayload<KYCFieldType[], string>, updateKYCFormValue: import("@reduxjs/toolkit").ActionCreatorWithPayload<KYCFormSingleUpdatePayload, string>, multiUpdateKYCForm: import("@reduxjs/toolkit").ActionCreatorWithPayload<KYCFormMultiUpdatePayload, string>, clearCountry: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, submittedSuccessfully: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, submitting: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, clearKYCFormSlice: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, submittingFailed: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, setKYCFormError: import("@reduxjs/toolkit").ActionCreatorWithPayload<KYCFormSingleUpdatePayload, string>, reset: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
declare const _default: import("redux").Reducer<{
    formFieldTypes: KYCFieldType[];
    formValues: {
        address1: string;
        address2: string;
        city: string;
        zip: string;
        province: string;
        firstName: string;
        lastName: string;
    };
    formErrors: {
        address1: string;
        address2: string;
        city: string;
        zip: string;
        province: string;
        firstName: string;
        lastName: string;
    };
    submitting: boolean;
    submittedSuccessfully: boolean;
}, import("redux").AnyAction>;
export default _default;
