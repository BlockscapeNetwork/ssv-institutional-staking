import { TypedUseSelectorHook } from 'react-redux';
export declare const store: import("@reduxjs/toolkit").EnhancedStore<{
    auth: {
        jwt: string;
        account: string;
        customerId: string;
    };
    kycForm: {
        formFieldTypes: import("./features/kyc/kyc-form.slice").KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    };
    settings: {
        debug: boolean;
    };
    navigation: {
        page: import("./features/navigation/navigation.slice").Page | import("./features/navigation/navigation.slice").PageError;
        error: boolean;
    };
    localization: {
        currentCountry: import("../../utils/address").Country;
        allCountries: import("../../utils/address").Country[];
    };
    pollingStatus: {
        amlVerificationStatus: import("./features/veriff/veriff-status.slice").AMLVerificationStatus;
        idVerificationStatus: import("../controllers/api/getKycStatus.api").IDVerificationStatus;
        blockChainMineComplete: boolean;
    };
    veriffSession: {
        id: string;
        url: string;
        vendorData: string;
        host: string;
        status: string;
        sessionToken: string;
    };
    veriffResponse: {
        status: import("./features/veriff/veriff-response.slice").VeriffStatus;
        veriffFrame: any;
    };
    ethereumContract: {
        governanceAddress: string;
        contractAddress: string;
        country: string;
        aml: string;
        did: string;
        signature: string;
        issuedAt: number;
        tokenId: number;
        txHash: string;
        isBusiness: boolean;
    };
}, import("redux").AnyAction, [import("redux-thunk").ThunkMiddleware<{
    auth: {
        jwt: string;
        account: string;
        customerId: string;
    };
    kycForm: {
        formFieldTypes: import("./features/kyc/kyc-form.slice").KYCFieldType[];
        formValues: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        formErrors: {
            address1: string;
            address2: string;
            city: string;
            zip: string;
            province: string;
            firstName: string;
            lastName: string;
        };
        submitting: boolean;
        submittedSuccessfully: boolean;
    };
    settings: {
        debug: boolean;
    };
    navigation: {
        page: import("./features/navigation/navigation.slice").Page | import("./features/navigation/navigation.slice").PageError;
        error: boolean;
    };
    localization: {
        currentCountry: import("../../utils/address").Country;
        allCountries: import("../../utils/address").Country[];
    };
    pollingStatus: {
        amlVerificationStatus: import("./features/veriff/veriff-status.slice").AMLVerificationStatus;
        idVerificationStatus: import("../controllers/api/getKycStatus.api").IDVerificationStatus;
        blockChainMineComplete: boolean;
    };
    veriffSession: {
        id: string;
        url: string;
        vendorData: string;
        host: string;
        status: string;
        sessionToken: string;
    };
    veriffResponse: {
        status: import("./features/veriff/veriff-response.slice").VeriffStatus;
        veriffFrame: any;
    };
    ethereumContract: {
        governanceAddress: string;
        contractAddress: string;
        country: string;
        aml: string;
        did: string;
        signature: string;
        issuedAt: number;
        tokenId: number;
        txHash: string;
        isBusiness: boolean;
    };
}, import("redux").AnyAction, undefined>]>;
export declare type RootState = ReturnType<typeof store.getState>;
export declare type AppDispatch = typeof store.dispatch;
export declare const useAppDispatch: () => AppDispatch;
export declare const useAppSelector: TypedUseSelectorHook<RootState>;
