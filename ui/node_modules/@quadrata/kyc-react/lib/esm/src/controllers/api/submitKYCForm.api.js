var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { store } from '../../store/store';
import { KYCFieldType, setKYCFormError } from '../../store/features/kyc/kyc-form.slice';
import { countryRemoveSpecialChars } from '../../../utils/simple';
var getFormValues = function () {
    var state = store.getState();
    var values = {
        customerId: state.auth.customerId,
        addressLine1: state.kycForm.formValues.address1,
        addressLine2: state.kycForm.formValues.address2,
        addressCity: state.kycForm.formValues.city,
        addressZip: state.kycForm.formValues.zip,
        addressState: state.kycForm.formValues.province,
        addressCountry: countryRemoveSpecialChars(state.localization.currentCountry.code),
        firstName: state.kycForm.formValues.firstName,
        lastName: state.kycForm.formValues.lastName,
    };
    Object.keys(values).forEach(function (k) { return !values[k] && delete values[k]; });
    return values;
};
var nameError = 'Enter your first and last name as they are written in your ID';
/**
 * Sends the KYC form to the backend. If Development Bypass is enabled,
 * the desired configurations for ID and AM verification will be sent
 * to the bypass endpoint instead. The form data is read from the redux store
 */
export var submitKYCForm = function (backendUrl, jwt) { return __awaiter(void 0, void 0, void 0, function () {
    var request, url, response, errorJson;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                request = getFormValues();
                url = "".concat(backendUrl, "/application");
                return [4 /*yield*/, fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            Authorization: "Bearer ".concat(jwt),
                        },
                        body: JSON.stringify(request),
                    })];
            case 1:
                response = _a.sent();
                if (!(response.status >= 400)) return [3 /*break*/, 3];
                return [4 /*yield*/, response.json()];
            case 2:
                errorJson = _a.sent();
                switch (errorJson.error) {
                    case 'First name failed verification':
                    case 'Last name failed verification': {
                        // Names are validated together so error for both
                        store.dispatch(setKYCFormError({
                            type: KYCFieldType.FIRST_NAME,
                            value: nameError,
                        }));
                        store.dispatch(setKYCFormError({
                            type: KYCFieldType.LAST_NAME,
                            value: nameError,
                        }));
                        break;
                    }
                    case 'Must supply a state':
                        store.dispatch(setKYCFormError({
                            type: KYCFieldType.PROVINCE,
                            value: 'Must supply a state',
                        }));
                        break;
                    default:
                        break;
                }
                throw new Error('Form is invalid');
            case 3: return [2 /*return*/, response.json()];
        }
    });
}); };
