var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import { useAppSelector } from '../store/store';
import { setTxHash } from '../store/features/ethereum/ethereum-contract.slice';
import { useNavigation } from '../store/features/navigation/hooks/useNavigation';
import { Page } from '../store/features/navigation/navigation.slice';
import { TosPdf } from '../components/common/TosPdf';
import { Passport } from '../components/common/Passport';
import { ethers } from 'ethers';
import { generateLedgerCompatibleSignature } from '../../utils/format.utils';
import { useSettings } from '../store/features/settings/hooks/useSettings';
import { PageLayout } from '../components/PageLayout';
export var PageMintNFT = function (_a) {
    var account = _a.account, onMintClick = _a.onMintClick, mintPrice = _a.mintPrice, signature = _a.signature, transactionHash = _a.transactionHash, backendUrl = _a.backendUrl;
    var _b = useState(false), agreed = _b[0], setAgreed = _b[1];
    var _c = useState(false), readMore = _c[0], setReadMore = _c[1];
    var _d = useState(false), showTermsOfService = _d[0], setShowTermsOfService = _d[1];
    var debug = useSettings().debug;
    var dispatch = useDispatch();
    var _e = useAppSelector(function (state) { return state.ethereumContract; }), aml = _e.aml, did = _e.did, tokenId = _e.tokenId, country = _e.country, issuedAt = _e.issuedAt, issuerSignature = _e.signature, isBusiness = _e.isBusiness;
    var navigate = useNavigation().navigate;
    useEffect(function () {
        if (transactionHash) {
            dispatch(setTxHash(transactionHash));
            console.log('Transaction hash found: ', transactionHash);
            navigate(Page.MINT_NFT_STATUS);
        }
    }, [dispatch, navigate, transactionHash]);
    var handleAgreedClick = function (event) {
        var checked = event.target.checked;
        setAgreed(checked);
    };
    var handleMintClick = function () {
        var params = {
            account: account,
            tokenId: tokenId,
            quadDID: did,
            aml: aml,
            country: country,
            isBusiness: ethers.utils.id(isBusiness ? 'TRUE' : 'FALSE'),
            issuedAt: issuedAt,
        };
        debug && console.log({ params: params, issuerSignature: issuerSignature, signature: signature });
        onMintClick(params, issuerSignature, generateLedgerCompatibleSignature(signature));
    };
    return (_jsxs(PageLayout, { children: [_jsx("h1", { children: "Your Identity Passport is ready to be claimed." }), _jsx("section", { children: _jsx("p", { children: "Your Web3 Identity Passport is ready to be claimed and will be stored in the Ethereum blockchain." }) }), _jsx("section", { children: _jsx("button", __assign({ className: "kyc-button kyc-button-toggle", onClick: function () { return setReadMore(!readMore); } }, { children: _jsx("span", { children: readMore ? '- Read less' : '+ What is minting?' }) })) }), readMore && (_jsx("section", __assign({ className: "kyc-read-more" }, { children: _jsx("p", { children: "Claiming the Web3 Identity Passport is a process that validates the information you have provided, creates a new block, and records the information on the blockchain." }) }))), _jsx("div", __assign({ className: "kyc-passport" }, { children: _jsx(Passport, {}) })), _jsx("section", __assign({ className: "kyc-prompt" }, { children: _jsxs("small", { children: ["The cost of minting the Web3 Identity Passport is ", mintPrice, " ETH plus any associated gas fees."] }) })), _jsxs("section", { children: [_jsx("input", { id: "kycMintPassportAgreeCheckbox", name: "agreed", type: "checkbox", checked: agreed, onChange: handleAgreedClick }), _jsxs("label", __assign({ htmlFor: "kycMintPassportAgreeCheckbox" }, { children: ["By checking this box I understand I am minting the passport for my own benefit and assume all risk related to posting. I further understand and agree to have the NFT automatically updated if there is a change in my KYC/AML status as set forth in the", _jsx("a", __assign({ onClick: function () { return setShowTermsOfService(!showTermsOfService); } }, { children: " Terms of Service" })), "."] }))] }), showTermsOfService && (_jsx("section", { children: _jsx(TosPdf, { backendUrl: backendUrl }) })), _jsx("section", __assign({ className: "kyc-buttons kyc-buttons-single" }, { children: _jsx("button", __assign({ onClick: function () {
                        if (!issuedAt) {
                            throw new Error('no issued at');
                        }
                        else {
                            handleMintClick();
                        }
                    }, disabled: !agreed, className: "kyc-button kyc-button-primary" }, { children: "Claim Passport" })) }))] }));
};
