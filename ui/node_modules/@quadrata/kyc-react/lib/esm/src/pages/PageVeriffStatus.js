var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useState } from 'react';
import { store, useAppDispatch, useAppSelector } from '../store/store';
import { useInterval } from '../../utils/hooks/useInterval';
import { getKycStatus, IDVerificationStatus } from '../controllers/api/getKycStatus.api';
import { clearIdPollingStatus, updateIdVerificationStatus } from '../store/features/veriff/veriff-status.slice';
import { getCountryByCode } from '../../utils/addressI8N';
import { updateCurrentCountry } from '../store/features/localization/localization.slice';
import { useNavigation } from '../store/features/navigation/hooks/useNavigation';
import { Page, PageError } from '../store/features/navigation/navigation.slice';
import { PageLayout } from '../components/PageLayout';
import { Loader } from '../components/common/Loader';
import { useSettings } from '../store/features/settings/hooks/useSettings';
export var PageVeriffStatus = function (_a) {
    var backendUrl = _a.backendUrl, children = _a.children;
    var dispatch = useAppDispatch();
    var customerId = useAppSelector(function (state) { return state.auth.customerId; });
    var _b = useNavigation(), navigate = _b.navigate, navigateByStatus = _b.navigateByStatus;
    var debug = useSettings().debug;
    var _c = useState(false), idVerificationStatusDecided = _c[0], setIdVerificationStatusDecided = _c[1];
    var pollStatus = function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a, error, addressCountry, contractParameters, _b, idVerificationStatus, decided, country;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!customerId) return [3 /*break*/, 2];
                    return [4 /*yield*/, getKycStatus(customerId, backendUrl)];
                case 1:
                    _a = _c.sent(), error = _a.error, addressCountry = _a.addressCountry, contractParameters = _a.contractParameters, _b = _a.idVerificationStatus, idVerificationStatus = _b === void 0 ? IDVerificationStatus.PENDING : _b;
                    debug &&
                        console.log('Polling KYC status: ', {
                            error: error,
                            addressCountry: addressCountry,
                            contractParameters: contractParameters,
                            idVerificationStatus: idVerificationStatus,
                        });
                    decided = idVerificationStatus === IDVerificationStatus.PASS ||
                        idVerificationStatus === IDVerificationStatus.FAIL;
                    setIdVerificationStatusDecided(decided);
                    dispatch(updateIdVerificationStatus(idVerificationStatus));
                    if (decided && addressCountry) {
                        country = getCountryByCode(addressCountry);
                        dispatch(updateCurrentCountry(country));
                    }
                    if (contractParameters) {
                        navigateByStatus({
                            error: error,
                            contractParameters: contractParameters,
                        });
                    }
                    _c.label = 2;
                case 2: return [2 /*return*/];
            }
        });
    }); };
    useInterval(function () {
        if (!idVerificationStatusDecided) {
            pollStatus();
        }
        else {
        }
    }, 2000);
    useEffect(function () {
        if (idVerificationStatusDecided) {
            var _a = store.getState(), status_1 = _a.pollingStatus.idVerificationStatus, did = _a.ethereumContract.did;
            if (!did && status_1 === IDVerificationStatus.PASS) {
                // if we are bypassing, this flow happens after the KYC form
                // so we just skip to the blockchain and AML status checking
                // immediately
                navigate(Page.KYC_FORM);
            }
            else if (!did && status_1 === IDVerificationStatus.FAIL) {
                dispatch(clearIdPollingStatus());
                navigate(PageError.VERIFF_ERROR);
            }
        }
    }, [dispatch, navigate, idVerificationStatusDecided]);
    return (_jsxs(PageLayout, __assign({ "data-id": "page-veriff-status" }, { children: [_jsx("h1", { children: "Please wait while we verify your ID." }), _jsxs("section", { children: [_jsx("b", { children: "Don't refresh your browser!" }), " This will only take a few minutes."] }), _jsx(Loader, { children: children })] })));
};
