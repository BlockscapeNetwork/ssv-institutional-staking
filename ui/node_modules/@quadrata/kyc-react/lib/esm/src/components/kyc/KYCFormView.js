var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import React, { Fragment, useEffect } from 'react';
import { KYCFieldType, submittedSuccessfully, submitting, submittingFailed, updateKYCFormFieldTypes, updateKYCFormValue, } from '../../store/features/kyc/kyc-form.slice';
import { generateFields } from './KYCGenerateFields';
import { submitKYCForm } from '../../controllers/api/submitKYCForm.api';
import { useNavigation } from '../../store/features/navigation/hooks/useNavigation';
import { validateKycFields } from '../../controllers/kyc/validateKYCFields';
import { useAppDispatch, useAppSelector } from '../../store/store';
import { fetchAllCountries, updateCurrentCountry } from '../../store/features/localization/localization.slice';
import { DEFAULT_COUNTRY_CODE, DEFAULT_PROVINCE } from '../../../consts';
import I8NAddressFormatter, { getCountryByCode } from '../../../utils/addressI8N';
import { useSettings } from '../../store/features/settings/hooks/useSettings';
var getFieldOrder = function (orderedFields, mobile) {
    if (mobile === void 0) { mobile = false; }
    var enums = Object.values(KYCFieldType);
    var newOrder = [];
    orderedFields.forEach(function (fieldList) {
        if (mobile) {
            fieldList.forEach(function (field) {
                if (enums.includes(field)) {
                    newOrder.push([field]);
                }
            });
        }
        else {
            var row_1 = [];
            fieldList.forEach(function (field) {
                if (enums.includes(field)) {
                    if (row_1.length >= 2) {
                        newOrder.push(row_1);
                        row_1 = [field];
                    }
                    else {
                        row_1.push(field);
                    }
                }
            });
            newOrder.push(row_1);
        }
    });
    return newOrder;
};
var DEFAULT_ORDER = [
    [KYCFieldType.FIRST_NAME, KYCFieldType.LAST_NAME],
    [KYCFieldType.ADDRESS_LINE_1],
    [KYCFieldType.ADDRESS_LINE_2],
    [KYCFieldType.CITY],
    [KYCFieldType.COUNTRY, KYCFieldType.PROVINCE, KYCFieldType.ZIP],
];
export var KycFormView = function (_a) {
    var backendUrl = _a.backendUrl, jwt = _a.jwt;
    var currentCountry = useAppSelector(function (state) { return state.localization.currentCountry; });
    var submittingForm = useAppSelector(function (state) { return state.kycForm.submitting; });
    var _b = React.useState(DEFAULT_ORDER), fieldOrder = _b[0], setFieldOrder = _b[1];
    var dispatch = useAppDispatch();
    var fieldMap = generateFields();
    var navigateByStatus = useNavigation().navigateByStatus;
    var debug = useSettings().debug;
    // Fetch all the countries on mount and set default locale values
    useEffect(function () {
        I8NAddressFormatter.getCountries().then(function (countries) {
            dispatch(fetchAllCountries(countries));
            dispatch(updateCurrentCountry(getCountryByCode(DEFAULT_COUNTRY_CODE)));
            dispatch(updateKYCFormValue({ type: KYCFieldType.PROVINCE, value: DEFAULT_PROVINCE }));
        });
    }, []);
    // Every time currentCountry is modified, re-order the fields
    useEffect(function () {
        if (currentCountry && currentCountry.code) {
            I8NAddressFormatter.getOrderedFields(currentCountry.code).then(function (orderedFields) {
                var newFieldOrder = getFieldOrder(orderedFields);
                setFieldOrder(newFieldOrder);
                // Flatten used KyxFieldType fields, order doesn't matter here
                var formFieldTypes = newFieldOrder.reduce(function (accumulator, value) { return accumulator.concat(value); }, []);
                dispatch(updateKYCFormFieldTypes(formFieldTypes));
            });
        }
    }, [currentCountry]);
    // Split the doms into halves. So the form has two columns.
    // TODO: REFACTOR
    var doms = [];
    fieldOrder.forEach(function (fieldTypes, i) {
        var rowDoms = [];
        fieldTypes.forEach(function (fieldType, j) {
            var fieldDom = _jsx(Fragment, { children: fieldMap[fieldType].dom }, "FieldContainer-".concat(i, "-").concat(j));
            rowDoms.push(fieldDom);
        });
        var key = "FormRow-".concat(i);
        doms.push(_jsx("div", __assign({ className: "FormRow" }, { children: rowDoms }), key));
        if (fieldTypes.includes(KYCFieldType.LAST_NAME)) {
            doms.push();
        }
    });
    return (_jsxs(_Fragment, { children: [_jsx("section", { children: doms }), _jsx("section", { children: _jsx("small", { children: "* By clicking Confirm, you consent to allow ky0x to store and process your information in order to provide the requested verification service(s)." }) }), _jsx("section", __assign({ className: "kyc-buttons kyc-buttons-single" }, { children: _jsx("button", __assign({ className: "kyc-button kyc-button-primary", onClick: function () { return __awaiter(void 0, void 0, void 0, function () {
                        var response, e_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    dispatch(submitting());
                                    if (!validateKycFields()) return [3 /*break*/, 6];
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 4, , 5]);
                                    return [4 /*yield*/, submitKYCForm(backendUrl, jwt)];
                                case 2:
                                    response = _a.sent();
                                    return [4 /*yield*/, dispatch(submittedSuccessfully())];
                                case 3:
                                    _a.sent();
                                    navigateByStatus({
                                        contractParameters: response.contractParameters,
                                        error: response.error,
                                    });
                                    return [3 /*break*/, 5];
                                case 4:
                                    e_1 = _a.sent();
                                    debug && console.log('KYC form view error: ', e_1);
                                    dispatch(submittingFailed());
                                    dispatch({
                                        type: 'FORM_ERROR',
                                        payload: 'Invalid form: please try again',
                                    });
                                    return [3 /*break*/, 5];
                                case 5: return [3 /*break*/, 7];
                                case 6:
                                    dispatch(submittingFailed());
                                    _a.label = 7;
                                case 7: return [2 /*return*/];
                            }
                        });
                    }); }, disabled: submittingForm, "data-id": "button-submit-kyc" }, { children: submittingForm ? 'Submitting...' : 'Submit information' })) }))] }));
};
