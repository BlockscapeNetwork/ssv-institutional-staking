var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import React, { useState } from 'react';
import { getTOSPDFLink } from '../../controllers/api/getTOSPDFLink.api';
import { Document, Page as PdfPage } from 'react-pdf';
import { PDF_C_MAP_URL } from '../App';
import { useSettings } from '../../store/features/settings/hooks/useSettings';
var options = {
    cMapUrl: PDF_C_MAP_URL,
    cMapPacked: true,
};
export var TosPdf = function (_a) {
    var backendUrl = _a.backendUrl;
    var debug = useSettings().debug;
    var _b = useState(''), url = _b[0], setUrl = _b[1];
    var _c = useState(0), numPages = _c[0], setNumPages = _c[1];
    React.useEffect(function () {
        getTOSPDFLink(backendUrl)
            .then(function (redirect) {
            setUrl(redirect);
        })
            .catch(function (e) {
            debug && console.log(e);
        });
    }, []);
    function onDocumentLoadSuccess(_a) {
        var nextNumPages = _a.numPages;
        setNumPages(nextNumPages);
    }
    return url ? (_jsx("div", __assign({ style: {
            width: '100%',
            height: '25rem',
            overflowY: 'scroll',
            paddingTop: '4rem',
            backgroundColor: '#000000',
            color: 'transparent',
            scrollbarWidth: 'thin',
        } }, { children: _jsx(Document, __assign({ file: url, options: options, "data-id": "div-document-container-tos", onLoadError: function () { return debug && console.error; }, onLoadSuccess: onDocumentLoadSuccess }, { children: Array.from(new Array(numPages), function (_el, index) { return (_jsx(PdfPage, { width: 500, pageNumber: index + 1 }, "page_".concat(index + 1))); }) })) }))) : (_jsx("span", { children: "Loading Terms Of Service..." }));
};
