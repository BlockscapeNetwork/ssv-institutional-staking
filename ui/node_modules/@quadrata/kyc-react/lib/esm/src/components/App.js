var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useEffect, useState } from 'react';
import { Navigator } from './Navigator';
import { Page, PageError } from '../store/features/navigation/navigation.slice';
import { PageIntro } from '../pages/PageIntro';
import { PageTOS } from '../pages/PageTOS';
import { useNavigation } from '../store/features/navigation/hooks/useNavigation';
import { PageAuthError } from '../pages/PageAuthError';
import { useAuth } from '../store/features/auth/hooks/useAuth';
import { login } from '../controllers/api/login.api';
import { PageSignWallet } from '../pages/PageSignWallet';
import { PageVeriff } from '../pages/PageVeriff';
import { PageVeriffError } from '../pages/PageVeriffError';
import { PageVeriffStatus } from '../pages/PageVeriffStatus';
import { PageMintNFT } from '../pages/PageMintNFT';
import { PageMintNFTStatus } from '../pages/PageMintNFTStatus';
import { pdfjs } from 'react-pdf';
import { PageMintNFTComplete } from '../pages/PageMintNFTComplete';
import { PageKYCForm } from '../pages/PageKYCForm';
import { Loader } from './common/Loader';
import { PageKYCError } from '../pages/PageKYCError';
import { truncateAccount } from '../../utils/format.utils';
import { useResetStore } from '../store/hooks/useResetStore';
import { useSettings } from '../store/features/settings/hooks/useSettings';
import { ErrorMessage } from './common/ErrorMessage';
export var PDF_C_MAP_URL = "//cdn.jsdelivr.net/npm/pdfjs-dist@".concat(pdfjs.version, "/cmaps/");
export var PDF_WORKER_SRC = "//cdnjs.cloudflare.com/ajax/libs/pdf.js/".concat(pdfjs.version, "/pdf.worker.min.js");
pdfjs.GlobalWorkerOptions.workerSrc = PDF_WORKER_SRC;
export var App = function (_a) {
    var error = _a.error, _debug = _a._debug, apiKey = _a.apiKey, onSign = _a.onSign, account = _a.account, children = _a.children, signature = _a.signature, mintPrice = _a.mintPrice, className = _a.className, backendUrl = _a.backendUrl, onMintClick = _a.onMintClick, mintComplete = _a.mintComplete, onPageChange = _a.onPageChange, etherscanUrl = _a.etherscanUrl, transactionHash = _a.transactionHash, _unsafeForcePage = _a._unsafeForcePage, showSocialButtons = _a.showSocialButtons;
    var setDebugMode = useSettings().setDebugMode;
    var _b = useNavigation(), page = _b.page, navigate = _b.navigate;
    var _c = useAuth(), jwt = _c.jwt, setAuth = _c.setAuth;
    var resetStore = useResetStore().resetStore;
    var _d = useState(true), loading = _d[0], setLoading = _d[1];
    // Login on initial render and credentials change.
    useEffect(function () {
        resetStore();
        setLoading(true);
        if (account) {
            if (!apiKey) {
                // No API key, redirecting.
                navigate(PageError.AUTH_ERROR);
                setLoading(false);
            }
            else {
                // Fetching JWT
                login({ apiKey: apiKey, account: account, backendUrl: backendUrl })
                    .then(function (jwt) {
                    setAuth(jwt);
                    setLoading(false);
                })
                    .catch(function (error) {
                    // Authentication error, redirecting.
                    console.error('Login error: ', error);
                    navigate(PageError.AUTH_ERROR);
                    setLoading(false);
                });
            }
        }
    }, [resetStore, apiKey, account, backendUrl]);
    // unsafe dev mode flag
    useEffect(function () {
        // Calling onPageChange if defined
        onPageChange && onPageChange(page);
        // Force navigating if _unsafeForcePage is defined
        if (_unsafeForcePage && _unsafeForcePage !== page) {
            console.warn('Warning, _unsafeForcePage prop should only be used during development, force navigating to page: ', _unsafeForcePage);
            navigate(_unsafeForcePage);
        }
    }, [page, _unsafeForcePage, _debug]);
    useEffect(function () {
        // Debug mode
        if (_debug) {
            console.warn('Warning, _debug prop should only be used during development, make sure to remove it in production, setting debug mode to true.');
            setDebugMode(_debug);
        }
    }, [_debug]);
    return (_jsx("div", __assign({ className: className }, { children: loading || !account || !mintPrice ? (_jsx(Loader, { children: children })) : (_jsxs(_Fragment, { children: [_jsx(Navigator, __assign({ page: Page.INTRO }, { children: _jsx(PageIntro, {}) })), _jsx(Navigator, __assign({ page: Page.TOS }, { children: _jsx(PageTOS, { backendUrl: backendUrl }) })), _jsx(Navigator, __assign({ page: Page.SIGN_WALLET }, { children: _jsx(PageSignWallet, __assign({ jwt: jwt, onSign: onSign, account: account, signature: signature, backendUrl: backendUrl }, { children: children })) })), _jsx(Navigator, __assign({ page: Page.VERIFF }, { children: _jsx(PageVeriff, { children: children }) })), _jsx(Navigator, __assign({ page: Page.VERIFF_STATUS }, { children: _jsx(PageVeriffStatus, __assign({ backendUrl: backendUrl }, { children: children })) })), _jsx(Navigator, __assign({ page: Page.KYC_FORM }, { children: _jsx(PageKYCForm, { jwt: jwt, backendUrl: backendUrl }) })), _jsx(Navigator, __assign({ page: Page.MINT_NFT }, { children: _jsx(PageMintNFT, { account: account, signature: signature, mintPrice: mintPrice, backendUrl: backendUrl, onMintClick: onMintClick, transactionHash: transactionHash }) })), _jsx(Navigator, __assign({ page: Page.MINT_NFT_STATUS }, { children: _jsx(PageMintNFTStatus, __assign({ mintComplete: mintComplete, etherscanUrl: etherscanUrl, transactionHash: transactionHash }, { children: children })) })), _jsx(Navigator, __assign({ page: Page.MINT_NFT_COMPLETE }, { children: _jsx(PageMintNFTComplete, { account: account, etherscanUrl: etherscanUrl, transactionHash: transactionHash, showSocialButtons: showSocialButtons }) })), _jsx(Navigator, __assign({ page: PageError.AUTH_ERROR }, { children: _jsx(PageAuthError, {}) })), _jsx(Navigator, __assign({ page: PageError.VERIFF_ERROR }, { children: _jsx(PageVeriffError, { backendUrl: backendUrl }) })), _jsx(Navigator, __assign({ page: PageError.KYC_ERROR }, { children: _jsx(PageKYCError, {}) })), _jsx(ErrorMessage, { errorType: error }), _jsxs("small", __assign({ className: "kyc-connected-account" }, { children: ["connected: ", truncateAccount(account)] }))] })) })));
};
