var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useAppDispatch, useAppSelector } from '../../store/store';
import { clearCountry, KYCFieldType, updateKYCFormValue } from '../../store/features/kyc/kyc-form.slice';
import { getCountryByCode } from '../../../utils/addressI8N';
import { updateCurrentCountry } from '../../store/features/localization/localization.slice';
var ErrorMessage = function (_a) {
    var error = _a.error;
    return (_jsx("div", __assign({ className: "kyc-input-error-message-container" }, { children: !!error && _jsx("span", __assign({ className: "kyc-input-error-message" }, { children: error })) })));
};
var KYCTextField = function (_a) {
    var type = _a.type, country = _a.country;
    var dispatch = useAppDispatch();
    var value = useAppSelector(function (state) { return state.kycForm.formValues[type]; });
    var error = useAppSelector(function (state) { return state.kycForm.formErrors[type]; });
    var label = country.labels[type];
    if (type === KYCFieldType.ZIP) {
        label = country.labels.postalCode;
    }
    var onChange = function (event) {
        dispatch(updateKYCFormValue({ value: event.target.value, type: type }));
    };
    // Do not show validation error text for names but still highlight box
    return (_jsxs("div", __assign({ className: "kyc-input-container" }, { children: [_jsx("label", __assign({ className: "kyc-input-label" }, { children: label })), _jsx("input", { type: "text", "data-id": "input-textfield-kyc-".concat(label), value: value, className: "KYCField", onChange: onChange }), _jsx(ErrorMessage, { error: error })] })));
};
var KYCCountrySelector = function () {
    var dispatch = useAppDispatch();
    var currentCountry = useAppSelector(function (state) { return state.localization.currentCountry; });
    var allCountries = useAppSelector(function (state) { return state.localization.allCountries; });
    var onChange = function (event) {
        var newCountry = getCountryByCode(event.target.value);
        dispatch(updateCurrentCountry(newCountry));
        dispatch(clearCountry());
    };
    var menuItemDoms = [];
    allCountries.forEach(function (country) {
        menuItemDoms.push(_jsx("option", __assign({ value: country.code }, { children: country.name }), country.code));
    });
    return (_jsxs("div", __assign({ className: "kyc-input-container" }, { children: [_jsx("label", __assign({ className: "kyc-input-label" }, { children: currentCountry.labels.country })), _jsx("select", __assign({ name: "country", "data-id": "input-select-kyc-country", value: currentCountry.code, onChange: onChange }, { children: menuItemDoms })), _jsx(ErrorMessage, {})] })));
};
var KYCProvinceSelector = function () {
    var dispatch = useAppDispatch();
    var currentProvince = useAppSelector(function (state) { return state.kycForm.formValues.province; });
    var currentCountry = useAppSelector(function (state) { return state.localization.currentCountry; });
    var error = useAppSelector(function (state) { return state.kycForm.formErrors.province; });
    var onChange = function (event) {
        var provinceCode = event.target.value;
        dispatch(updateKYCFormValue({ value: provinceCode, type: KYCFieldType.PROVINCE }));
    };
    var menuItemDoms = [];
    currentCountry.zones.forEach(function (zone) {
        menuItemDoms.push(_jsx("option", __assign({ value: zone.code }, { children: zone.name }), zone.code));
    });
    return (_jsxs("div", __assign({ className: "kyc-input-container" }, { children: [_jsx("label", __assign({ className: "kyc-input-label" }, { children: currentCountry.labels.zone })), _jsx("select", __assign({ "data-id": "input-select-kyc-province", value: currentProvince, onChange: onChange }, { children: menuItemDoms })), _jsx(ErrorMessage, { error: error })] })));
};
export default (function (_a) {
    var type = _a.type;
    // wait for the loading screen if still waiting for the country to load
    var country = useAppSelector(function (state) { return state.localization.currentCountry; });
    if (country.code === undefined) {
        return _jsx("div", {});
    }
    var dom = null;
    switch (type) {
        case KYCFieldType.ADDRESS_LINE_1:
        case KYCFieldType.ADDRESS_LINE_2:
        case KYCFieldType.FIRST_NAME:
        case KYCFieldType.LAST_NAME:
        case KYCFieldType.ZIP:
        case KYCFieldType.CITY:
            dom = _jsx(KYCTextField, { type: type, country: country });
            break;
        case KYCFieldType.PROVINCE:
            dom = _jsx(KYCProvinceSelector, {});
            break;
        case KYCFieldType.COUNTRY:
            dom = _jsx(KYCCountrySelector, {});
            break;
        default:
            break;
    }
    if (!dom) {
        throw Error('Invalid Field Type');
    }
    return dom;
});
export { KYCFieldType };
