import { PayloadAction } from '@reduxjs/toolkit';
import { createVeriffFrame } from '@veriff/incontext-sdk';
export declare type VeriffFrame = ReturnType<typeof createVeriffFrame>;
export declare enum VeriffStatus {
    PENDING = 0,
    STARTED = 1,
    CANCELED = 2,
    FINISHED = 3
}
export declare const slice: import("@reduxjs/toolkit").Slice<{
    status: VeriffStatus;
    veriffFrame: any;
}, {
    updateVeriffStatus: (state: import("immer/dist/internal").WritableDraft<{
        status: VeriffStatus;
        veriffFrame: any;
    }>, action: PayloadAction<VeriffStatus>) => void;
    clearVeriffStatus: (state: import("immer/dist/internal").WritableDraft<{
        status: VeriffStatus;
        veriffFrame: any;
    }>) => void;
    setVeriffFrame: (state: import("immer/dist/internal").WritableDraft<{
        status: VeriffStatus;
        veriffFrame: any;
    }>, action: PayloadAction<any>) => void;
    reset: (state: import("immer/dist/internal").WritableDraft<{
        status: VeriffStatus;
        veriffFrame: any;
    }>) => import("immer/dist/internal").WritableDraft<{
        status: VeriffStatus;
        veriffFrame: any;
    }>;
}, "VeriffResponseSlice">;
export declare const updateVeriffStatus: import("@reduxjs/toolkit").ActionCreatorWithPayload<VeriffStatus, string>, clearVeriffStatus: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, setVeriffFrame: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>, reset: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
declare const _default: import("redux").Reducer<{
    status: VeriffStatus;
    veriffFrame: any;
}, import("redux").AnyAction>;
export default _default;
