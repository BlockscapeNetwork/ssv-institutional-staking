import { PayloadAction } from '@reduxjs/toolkit';
import { IDVerificationStatus } from '../../../controllers/api/getKycStatus.api';
export declare enum AMLVerificationStatus {
    PENDING = "PENDING",
    LOW_RISK = "LOW_RISK",
    MEDIUM_RISK = "MEDIUM_RISK",
    HIGH_RISK = "HIGH_RISK",
    REVIEW_REQUIRED = "REVIEW_REQUIRED"
}
export declare const slice: import("@reduxjs/toolkit").Slice<{
    amlVerificationStatus: AMLVerificationStatus;
    idVerificationStatus: IDVerificationStatus;
    blockChainMineComplete: boolean;
}, {
    updateIdVerificationStatus: (state: import("immer/dist/internal").WritableDraft<{
        amlVerificationStatus: AMLVerificationStatus;
        idVerificationStatus: IDVerificationStatus;
        blockChainMineComplete: boolean;
    }>, action: PayloadAction<IDVerificationStatus>) => void;
    updateAmlVerificationStatus: (state: import("immer/dist/internal").WritableDraft<{
        amlVerificationStatus: AMLVerificationStatus;
        idVerificationStatus: IDVerificationStatus;
        blockChainMineComplete: boolean;
    }>, action: PayloadAction<AMLVerificationStatus>) => void;
    blockChainMineSetComplete: (state: import("immer/dist/internal").WritableDraft<{
        amlVerificationStatus: AMLVerificationStatus;
        idVerificationStatus: IDVerificationStatus;
        blockChainMineComplete: boolean;
    }>) => void;
    clearKYCPollingStatus: (state: import("immer/dist/internal").WritableDraft<{
        amlVerificationStatus: AMLVerificationStatus;
        idVerificationStatus: IDVerificationStatus;
        blockChainMineComplete: boolean;
    }>) => void;
    clearIdPollingStatus: (state: import("immer/dist/internal").WritableDraft<{
        amlVerificationStatus: AMLVerificationStatus;
        idVerificationStatus: IDVerificationStatus;
        blockChainMineComplete: boolean;
    }>) => void;
    clearPollingStatusSlice: (state: import("immer/dist/internal").WritableDraft<{
        amlVerificationStatus: AMLVerificationStatus;
        idVerificationStatus: IDVerificationStatus;
        blockChainMineComplete: boolean;
    }>) => void;
    reset: (state: import("immer/dist/internal").WritableDraft<{
        amlVerificationStatus: AMLVerificationStatus;
        idVerificationStatus: IDVerificationStatus;
        blockChainMineComplete: boolean;
    }>) => import("immer/dist/internal").WritableDraft<{
        amlVerificationStatus: AMLVerificationStatus;
        idVerificationStatus: IDVerificationStatus;
        blockChainMineComplete: boolean;
    }>;
}, "PollingStatusSlice">;
export declare const updateIdVerificationStatus: import("@reduxjs/toolkit").ActionCreatorWithPayload<IDVerificationStatus, string>, updateAmlVerificationStatus: import("@reduxjs/toolkit").ActionCreatorWithPayload<AMLVerificationStatus, string>, blockChainMineSetComplete: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, clearKYCPollingStatus: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, clearIdPollingStatus: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, clearPollingStatusSlice: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, reset: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
declare const _default: import("redux").Reducer<{
    amlVerificationStatus: AMLVerificationStatus;
    idVerificationStatus: IDVerificationStatus;
    blockChainMineComplete: boolean;
}, import("redux").AnyAction>;
export default _default;
