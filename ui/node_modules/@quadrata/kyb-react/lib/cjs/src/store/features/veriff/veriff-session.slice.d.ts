import { PayloadAction } from '@reduxjs/toolkit';
export interface VeriffSessionPayload {
    id: string;
    url: string;
    vendorData: string;
    host: string;
    status: string;
    sessionToken: string;
}
export declare const veriffSessionSlice: import("@reduxjs/toolkit").Slice<{
    id: string;
    url: string;
    vendorData: string;
    host: string;
    status: string;
    sessionToken: string;
}, {
    updateVeriffSession: (state: import("immer/dist/internal").WritableDraft<{
        id: string;
        url: string;
        vendorData: string;
        host: string;
        status: string;
        sessionToken: string;
    }>, action: PayloadAction<VeriffSessionPayload>) => void;
    clearVeriffSessionSlice: (state: import("immer/dist/internal").WritableDraft<{
        id: string;
        url: string;
        vendorData: string;
        host: string;
        status: string;
        sessionToken: string;
    }>) => void;
    reset: (state: import("immer/dist/internal").WritableDraft<{
        id: string;
        url: string;
        vendorData: string;
        host: string;
        status: string;
        sessionToken: string;
    }>) => import("immer/dist/internal").WritableDraft<{
        id: string;
        url: string;
        vendorData: string;
        host: string;
        status: string;
        sessionToken: string;
    }>;
}, "veriff-session">;
export declare const updateVeriffSession: import("@reduxjs/toolkit").ActionCreatorWithPayload<VeriffSessionPayload, string>, clearVeriffSessionSlice: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, reset: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
declare const _default: import("redux").Reducer<{
    id: string;
    url: string;
    vendorData: string;
    host: string;
    status: string;
    sessionToken: string;
}, import("redux").AnyAction>;
export default _default;
