import { PayloadAction } from '@reduxjs/toolkit';
export interface EthereumContractUpdateProps {
    governanceAddress: string;
    contractAddress: string;
    country: string;
    aml: string;
    did: string;
    signature: string;
    issuedAt: number;
    tokenId: number;
    isBusiness?: boolean;
}
export declare const slice: import("@reduxjs/toolkit").Slice<{
    governanceAddress: string;
    contractAddress: string;
    country: string;
    aml: string;
    did: string;
    signature: string;
    issuedAt: number;
    tokenId: number;
    txHash: string;
    isBusiness: boolean;
}, {
    setEthereumContract: (state: import("immer/dist/internal").WritableDraft<{
        governanceAddress: string;
        contractAddress: string;
        country: string;
        aml: string;
        did: string;
        signature: string;
        issuedAt: number;
        tokenId: number;
        txHash: string;
        isBusiness: boolean;
    }>, action: PayloadAction<EthereumContractUpdateProps>) => void;
    clearEthereumContract: (state: import("immer/dist/internal").WritableDraft<{
        governanceAddress: string;
        contractAddress: string;
        country: string;
        aml: string;
        did: string;
        signature: string;
        issuedAt: number;
        tokenId: number;
        txHash: string;
        isBusiness: boolean;
    }>) => void;
    setTxHash: (state: import("immer/dist/internal").WritableDraft<{
        governanceAddress: string;
        contractAddress: string;
        country: string;
        aml: string;
        did: string;
        signature: string;
        issuedAt: number;
        tokenId: number;
        txHash: string;
        isBusiness: boolean;
    }>, action: PayloadAction<string>) => void;
    reset: (state: import("immer/dist/internal").WritableDraft<{
        governanceAddress: string;
        contractAddress: string;
        country: string;
        aml: string;
        did: string;
        signature: string;
        issuedAt: number;
        tokenId: number;
        txHash: string;
        isBusiness: boolean;
    }>) => import("immer/dist/internal").WritableDraft<{
        governanceAddress: string;
        contractAddress: string;
        country: string;
        aml: string;
        did: string;
        signature: string;
        issuedAt: number;
        tokenId: number;
        txHash: string;
        isBusiness: boolean;
    }>;
}, "EthereumContractSlice">;
export declare const setEthereumContract: import("@reduxjs/toolkit").ActionCreatorWithPayload<EthereumContractUpdateProps, string>, clearEthereumContract: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, setTxHash: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, string>, reset: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
declare const _default: import("redux").Reducer<{
    governanceAddress: string;
    contractAddress: string;
    country: string;
    aml: string;
    did: string;
    signature: string;
    issuedAt: number;
    tokenId: number;
    txHash: string;
    isBusiness: boolean;
}, import("redux").AnyAction>;
export default _default;
