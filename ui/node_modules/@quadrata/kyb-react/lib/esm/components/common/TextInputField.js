var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Input, Small, Textarea, FieldLabel, FieldContainer } from '../Typography';
export var TextInputType;
(function (TextInputType) {
    TextInputType["TEXT"] = "text";
    TextInputType["EMAIL"] = "email";
    TextInputType["TEXTAREA"] = "textarea";
    TextInputType["PHONE"] = "tel";
})(TextInputType || (TextInputType = {}));
var Node = function (_a) {
    var type = _a.type, value = _a.value, required = _a.required, onChange = _a.onChange;
    var attributes = { value: value, required: required, onChange: onChange };
    return type !== TextInputType.TEXTAREA ? _jsx(Input, __assign({ type: type }, attributes)) : _jsx(Textarea, __assign({}, attributes));
};
export var TextInputField = function (_a) {
    var id = _a.id, _b = _a.type, type = _b === void 0 ? TextInputType.TEXT : _b, value = _a.value, error = _a.error, label = _a.label, required = _a.required, onChange = _a.onChange, description = _a.description;
    var handleChange = function (event) {
        var value = event.currentTarget.value;
        onChange({ id: id, value: value });
    };
    var extendedClassName = type === TextInputType.TEXTAREA ? 'textarea' : 'input';
    return (_jsxs(FieldContainer, __assign({ extendedClassName: extendedClassName }, { children: [_jsx(FieldLabel, { label: label, error: error, extendedClassName: extendedClassName }), _jsx(Node, { type: type, value: value, required: required, onChange: handleChange }), description && _jsxs(Small, __assign({ extendedClassName: extendedClassName }, { children: ["* ", description] }))] })));
};
