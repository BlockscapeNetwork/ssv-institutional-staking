var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useRef } from 'react';
import { Input, Small, Button, FieldLabel, FieldContainer } from '../Typography';
export var FileInputField = function (_a) {
    var id = _a.id, error = _a.error, value = _a.value, label = _a.label, onChange = _a.onChange, onRemove = _a.onRemove, required = _a.required, description = _a.description;
    var inputRef = useRef(null);
    var handleChange = function (event) {
        var file = event.currentTarget.files && event.currentTarget.files[0];
        var formFile;
        if (file) {
            formFile = {
                name: file.name,
                type: file.type,
                size: file.size,
                objectURL: URL.createObjectURL(file),
            };
        }
        onChange({ id: id, value: formFile });
        // Cleaning up value to prevent not calling onChange upon selecting the same file twice
        event.currentTarget.value = '';
    };
    var handleClick = function () {
        if (inputRef.current) {
            inputRef.current.click();
        }
    };
    var handleRemove = function () {
        onRemove(id);
    };
    return (_jsxs(FieldContainer, __assign({ extendedClassName: "file" }, { children: [_jsx(FieldLabel, { label: label, error: error, extendedClassName: "file" }), _jsx("input", { ref: inputRef, style: { display: 'none' }, type: "file", required: required, onChange: handleChange }), _jsxs("div", __assign({ className: "quad-file-upload-container" }, { children: [_jsx(Input, { type: "text", value: value ? value.name : 'No file chosen', onClick: handleClick, disabled: true, extendedClassName: "file" }), !value ? (_jsx(Button, __assign({ primary: true, extendedClassName: "file-select", onClick: handleClick }, { children: "Select File..." }))) : (_jsx(Button, __assign({ onClick: handleRemove, extendedClassName: "file-remove" }, { children: "Remove" })))] })), description && _jsxs(Small, __assign({ extendedClassName: "file" }, { children: ["* ", description] }))] })));
};
