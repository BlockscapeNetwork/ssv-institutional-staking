var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Navigator } from './Navigator';
import { useEffect } from 'react';
import { PageKyb } from '../store/features/navigation/navigation.slice';
import { useSettings } from '../store/features/settings/hooks/useSettings';
import { PageBasicInformation } from '../pages/PageBasicInformation';
import { useNavigation } from '../store/features/navigation/hooks/useNavigation';
import { PageError } from '../pages/PageError';
import { PageAuthError } from '../pages/PageAuthError';
import { PageTaxes } from '../pages/PageTaxes';
import { PageOwnership } from '../pages/PageOwnership';
import { PageWallets } from '../pages/PageWallets';
import { PageDocuments } from '../pages/PageDocuments';
import { PageTos } from '../pages/PageTos';
import { PageUpload } from '../pages/PageUpload';
import { PageComplete } from '../pages/PageComplete';
import { PageIntro } from '../pages/PageIntro';
export var App = function (_a) {
    var kybId = _a.kybId, _debug = _a._debug, children = _a.children, className = _a.className, discordUrl = _a.discordUrl, backendUrl = _a.backendUrl, contactEmail = _a.contactEmail, onPageChange = _a.onPageChange, _unsafeForcePage = _a._unsafeForcePage;
    // Hooks
    var _b = useSettings(), debug = _b.debug, setDebugMode = _b.setDebugMode;
    var _c = useNavigation(), page = _c.page, navigate = _c.navigate;
    // Effects
    // Enforcing kybId
    useEffect(function () {
        if (!kybId || !backendUrl) {
            // missing credentials, navigating to auth error page
            navigate(PageKyb.AUTH_ERROR);
        }
    }, [kybId, backendUrl]);
    // unsafe dev mode flag
    useEffect(function () {
        // Calling onPageChange if defined
        onPageChange && onPageChange(page);
        // Force navigating if _unsafeForcePage is defined
        debug && _unsafeForcePage && console.debug('_unsafeForcePage', _unsafeForcePage);
        if (_unsafeForcePage && _unsafeForcePage !== page) {
            console.warn('Warning, _unsafeForcePage prop should only be used during development, force navigating to page: ', _unsafeForcePage);
            navigate(_unsafeForcePage);
        }
    }, [page, _unsafeForcePage, debug]);
    useEffect(function () {
        // Debug mode
        if (_debug) {
            console.warn('Warning, _debug prop should only be used during development, make sure to remove it in production, setting debug mode to true.');
            setDebugMode(_debug);
        }
    }, [_debug]);
    return (_jsxs("div", __assign({ className: className }, { children: [_jsx(Navigator, __assign({ page: PageKyb.INTRO }, { children: _jsx(PageIntro, {}) })), _jsx(Navigator, __assign({ page: PageKyb.BASIC_INFORMATION }, { children: _jsx(PageBasicInformation, {}) })), _jsx(Navigator, __assign({ page: PageKyb.TAXES }, { children: _jsx(PageTaxes, {}) })), _jsx(Navigator, __assign({ page: PageKyb.OWNERSHIP }, { children: _jsx(PageOwnership, {}) })), _jsx(Navigator, __assign({ page: PageKyb.WALLETS }, { children: _jsx(PageWallets, {}) })), _jsx(Navigator, __assign({ page: PageKyb.DOCUMENTS }, { children: _jsx(PageDocuments, {}) })), _jsx(Navigator, __assign({ page: PageKyb.TOS }, { children: _jsx(PageTos, {}) })), _jsx(Navigator, __assign({ page: PageKyb.UPLOAD }, { children: _jsx(PageUpload, __assign({ kybId: kybId, backendUrl: backendUrl, _unsafeForcePage: _unsafeForcePage }, { children: children })) })), _jsx(Navigator, __assign({ page: PageKyb.COMPLETE }, { children: _jsx(PageComplete, {}) })), _jsx(Navigator, __assign({ page: PageKyb.ERROR }, { children: _jsx(PageError, { discordUrl: discordUrl, contactEmail: contactEmail }) })), _jsx(Navigator, __assign({ page: PageKyb.AUTH_ERROR }, { children: _jsx(PageAuthError, { discordUrl: discordUrl, contactEmail: contactEmail }) }))] })));
};
