var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PageLayout } from '../components/PageLayout';
import { useNavigation } from '../store/features/navigation/hooks/useNavigation';
import { PageKyb } from '../store/features/navigation/navigation.slice';
import { useForm } from '../store/features/form/hooks/useForm';
import { FormFileType } from '../store/features/form/form.slice';
import { FileInputField } from '../components/common/FileInputField';
import { Button, Section } from '../components/Typography';
import { ButtonsSection } from '../components/ButtonsSection';
export var PageDocuments = function () {
    //Hooks
    var navigate = useNavigation().navigate;
    var _a = useForm(), setFormFile = _a.setFormFile, files = _a.files;
    var handleFileSelect = function (_a) {
        var id = _a.id, value = _a.value;
        setFormFile({ key: id, value: value });
    };
    var handleFileRemove = function (key) {
        setFormFile({ key: key, value: undefined });
    };
    return (_jsxs(PageLayout, __assign({ page: PageKyb.DOCUMENTS }, { children: [_jsx("h1", { children: "Quadrata Passport Business Application" }), _jsxs(Section, __assign({ extendedClassName: "documents" }, { children: [_jsx("h2", { children: "Section 5 - Document Upload" }), _jsx(FileInputField, { id: FormFileType.CERTIFICATE_OF_INCORPORATION, label: "Certificate of Incorporation", value: files[FormFileType.CERTIFICATE_OF_INCORPORATION], onChange: handleFileSelect, onRemove: handleFileRemove, description: "Or equivalent Formation Document" }), _jsx(FileInputField, { id: FormFileType.BYLAWS, label: "Bylaws", value: files[FormFileType.BYLAWS], onChange: handleFileSelect, onRemove: handleFileRemove, description: "Or equivalent governance documents" }), _jsx(FileInputField, { id: FormFileType.KYC_AML_PROGRAM, label: "Document detailing Company\u2019s KYC/AML program", value: files[FormFileType.KYC_AML_PROGRAM], onChange: handleFileSelect, onRemove: handleFileRemove }), _jsx(FileInputField, { id: FormFileType.AUTHORIZED_SIGNATORY_LIST, label: "Authorized signatory list", value: files[FormFileType.AUTHORIZED_SIGNATORY_LIST], onChange: handleFileSelect, onRemove: handleFileRemove }), _jsx(FileInputField, { id: FormFileType.BANK_VERIFICATION, label: "Bank verification document", value: files[FormFileType.BANK_VERIFICATION], onChange: handleFileSelect, onRemove: handleFileRemove, description: "A recent bank statement or online banking screenshots showing the bank name, Company\u2019s name, and account number" })] })), _jsxs(ButtonsSection, { children: [_jsx(Button, __assign({ onClick: function () { return navigate(PageKyb.OWNERSHIP); } }, { children: "Back" })), _jsx(Button, __assign({ primary: true, onClick: function () { return navigate(PageKyb.TOS); } }, { children: "Step 6 - Electronic Signature" }))] })] })));
};
