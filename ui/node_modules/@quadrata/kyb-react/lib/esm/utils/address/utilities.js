import { FieldName } from './consts';
var FIELD_REGEXP = /({\w+})/g;
export var FIELDS_MAPPING = {
    '{firstName}': FieldName.FirstName,
    '{lastName}': FieldName.LastName,
    '{country}': FieldName.Country,
    '{city}': FieldName.City,
    '{zip}': FieldName.PostalCode,
    '{province}': FieldName.Zone,
    '{address1}': FieldName.Address1,
    '{address2}': FieldName.Address2,
    '{phone}': FieldName.Phone,
    '{company}': FieldName.Company,
};
function getZone(zones, zoneCode) {
    return (zones.find(function (zone) { return zone.code === zoneCode; }) || {
        name: '',
        code: '',
    });
}
/*
 * Returns empty string if all replacement fields are empty.
 */
export function renderLineTemplate(country, template, address) {
    var result = template.match(FIELD_REGEXP);
    var line = template;
    if (!result) {
        return '';
    }
    var lineIsEmpty = true;
    result.forEach(function (key) {
        var addressKey = key.replace('{', '').replace('}', '');
        if (address[addressKey]) {
            lineIsEmpty = false;
        }
        switch (addressKey) {
            case FieldName.Country:
                line = line.replace("{".concat(FieldName.Country, "}"), country.name);
                break;
            case FieldName.Zone:
                line = line.replace("{".concat(FieldName.Zone, "}"), address.province ? getZone(country.zones, address.province).name : '');
                break;
            default:
                line = line.replace(key, address[addressKey] || '');
                break;
        }
    });
    if (lineIsEmpty) {
        return '';
    }
    return line.trim().replace('  ', ' ');
}
