var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { loadCountry, loadCountries } from './loader';
import { renderLineTemplate, FIELDS_MAPPING } from './utilities';
var FIELD_REGEXP = /({\w+})/g;
var LINE_DELIMITER = '_';
var DEFAULT_FORM_LAYOUT = '{firstName}{lastName}_{company}_{address1}_{address2}_{city}_{country}{province}{zip}_{phone}';
var DEFAULT_SHOW_LAYOUT = '{lastName} {firstName}_{company}_{address1} {address2}_{city} {province} {zip}_{country}_{phone}';
var ORDERED_COUNTRIES_CACHE = {};
var AddressFormatter = /** @class */ (function () {
    function AddressFormatter(locale) {
        this.locale = locale;
        this.locale = locale;
    }
    AddressFormatter.prototype.updateLocale = function (locale) {
        this.locale = locale;
    };
    AddressFormatter.prototype.getCountry = function (countryCode) {
        return __awaiter(this, void 0, void 0, function () {
            var country;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        country = this.loadCountryFromCache(countryCode);
                        if (country) {
                            return [2 /*return*/, country];
                        }
                        return [4 /*yield*/, loadCountry(this.locale, countryCode)];
                    case 1:
                        country = _a.sent();
                        return [2 /*return*/, country];
                }
            });
        });
    };
    AddressFormatter.prototype.getCountries = function () {
        return __awaiter(this, void 0, void 0, function () {
            var countries;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, loadCountries(this.locale)];
                    case 1:
                        countries = _a.sent();
                        ORDERED_COUNTRIES_CACHE[this.locale] = countries;
                        return [2 /*return*/, countries];
                }
            });
        });
    };
    /* Returns the address ordered in an array based based on the country code
     * Eg.:
     *   [
     *     'Shopify',
     *     'First Name Last Name',
     *     'Address 1',
     *     'address2',
     *     'MontrÃ©al',
     *     'Canada Quebec H2J 4B7',
     *     '514 444 3333'
     *   ]
     */
    AddressFormatter.prototype.format = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var country, layout;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCountry(address.country)];
                    case 1:
                        country = _a.sent();
                        layout = country.formatting.show || DEFAULT_SHOW_LAYOUT;
                        return [2 /*return*/, layout.split(LINE_DELIMITER).map(function (fields) { return renderLineTemplate(country, fields, address).trim(); })];
                }
            });
        });
    };
    /* Returns an array that shows how to order fields based on the country code
     * Eg.:
     *   [
     *     ['company'],
     *     ['firstName', 'lastName'],
     *     ['address1'],
     *     ['address2'],
     *     ['city'],
     *     ['country', 'province', 'zip'],
     *     ['phone']
     *   ]
     */
    AddressFormatter.prototype.getOrderedFields = function (countryCode) {
        return __awaiter(this, void 0, void 0, function () {
            var country, format;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCountry(countryCode)];
                    case 1:
                        country = _a.sent();
                        format = country ? country.formatting.edit : DEFAULT_FORM_LAYOUT;
                        return [2 /*return*/, format.split(LINE_DELIMITER).map(function (fields) {
                                var result = fields.match(FIELD_REGEXP);
                                if (!result) {
                                    return [];
                                }
                                return result.map(function (field) {
                                    return FIELDS_MAPPING[field];
                                });
                            })];
                }
            });
        });
    };
    AddressFormatter.prototype.loadCountryFromCache = function (countryCode) {
        if (ORDERED_COUNTRIES_CACHE[this.locale]) {
            return ORDERED_COUNTRIES_CACHE[this.locale].find(function (country) {
                return country.code === countryCode;
            });
        }
        return null;
    };
    return AddressFormatter;
}());
export default AddressFormatter;
