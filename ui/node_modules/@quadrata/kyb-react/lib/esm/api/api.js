var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { FormFileType } from '../store/features/form/form.slice';
export var getUploadURL = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var backendUrl, kybId, fileName, contentType, applicationId, backendUrlWithParams, response, uploadURL;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                backendUrl = params.backendUrl, kybId = params.kybId, fileName = params.fileName, contentType = params.contentType, applicationId = params.applicationId;
                backendUrlWithParams = "".concat(backendUrl, "/uploads?kybId=").concat(kybId, "&fileName=").concat(fileName, "&contentType=").concat(contentType, "&applicationId=").concat(applicationId);
                return [4 /*yield*/, fetch(backendUrlWithParams)];
            case 1:
                response = _a.sent();
                return [4 /*yield*/, response.json()];
            case 2:
                uploadURL = (_a.sent()).uploadURL;
                if (!response.ok || !uploadURL) {
                    throw Error('Failed to get upload URL.');
                }
                return [2 /*return*/, uploadURL];
        }
    });
}); };
export var uploadFile = function (uploadURL, objectURL) { return __awaiter(void 0, void 0, void 0, function () {
    var body, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetch(objectURL).then(function (r) { return r.blob(); })];
            case 1:
                body = _a.sent();
                return [4 /*yield*/, fetch(uploadURL, {
                        method: 'PUT',
                        body: body,
                    })];
            case 2:
                response = _a.sent();
                if (!response.ok) {
                    throw Error('Failed to upload file');
                }
                return [2 /*return*/];
        }
    });
}); };
export var generateAndUploadFormFieldsJson = function (_a) { return __awaiter(void 0, void 0, void 0, function () {
    var fileName, type, uploadURL, blob, file;
    var fields = _a.fields, params = __rest(_a, ["fields"]);
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                fileName = "".concat(FormFileType.FORM_FIELDS, ".json");
                type = 'application/json';
                return [4 /*yield*/, getUploadURL(__assign(__assign({}, params), { fileName: fileName, contentType: type }))];
            case 1:
                uploadURL = _b.sent();
                blob = new Blob([JSON.stringify(fields, null, 2)], {
                    type: type,
                });
                file = new File([blob], fileName, { type: type });
                return [4 /*yield*/, uploadFile(uploadURL, URL.createObjectURL(file))];
            case 2:
                _b.sent();
                return [2 /*return*/];
        }
    });
}); };
export var submitKYBForm = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var files, fields, kybId, backendUrl, applicationId, uploadURLPromises, uploadURLResponses, uploadFilePromises;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                files = params.files, fields = params.fields, kybId = params.kybId, backendUrl = params.backendUrl, applicationId = params.applicationId;
                uploadURLPromises = Object.entries(files).reduce(function (reducer, _a) {
                    var formFileType = _a[0], file = _a[1];
                    if (file) {
                        var params_1 = {
                            kybId: kybId,
                            fileName: "".concat(formFileType, "-").concat(file.name),
                            backendUrl: backendUrl,
                            contentType: file.type,
                            applicationId: applicationId,
                        };
                        // Adding metadata to promise for later mapping
                        var promiseWithMeta = getUploadURL(params_1).then(function (uploadURL) {
                            return {
                                formFileType: formFileType,
                                uploadURL: uploadURL,
                            };
                        });
                        reducer.push(promiseWithMeta);
                    }
                    return reducer;
                }, []);
                return [4 /*yield*/, Promise.all(uploadURLPromises)];
            case 1:
                uploadURLResponses = _a.sent();
                uploadFilePromises = uploadURLResponses.reduce(function (reducer, _a) {
                    var formFileType = _a.formFileType, uploadURL = _a.uploadURL;
                    var formFile = files[formFileType];
                    if (uploadURL && formFile) {
                        reducer.push(uploadFile(uploadURL, formFile.objectURL));
                    }
                    return reducer;
                }, []);
                // Uploading all user files
                return [4 /*yield*/, Promise.all(uploadFilePromises)];
            case 2:
                // Uploading all user files
                _a.sent();
                // Generating and uploading form fields JSON file
                return [4 /*yield*/, generateAndUploadFormFieldsJson({
                        fields: fields,
                        kybId: kybId,
                        backendUrl: backendUrl,
                        applicationId: applicationId,
                    })];
            case 3:
                // Generating and uploading form fields JSON file
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
