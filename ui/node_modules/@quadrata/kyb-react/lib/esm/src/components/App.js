var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect } from 'react';
import { Navigator } from './Navigator';
import { Page } from '../store/features/navigation/navigation.slice';
import { PageIntro } from '../pages/PageIntro';
import { PageTOS } from '../pages/PageTOS';
import { useNavigation } from '../store/features/navigation/hooks/useNavigation';
import { ErrorMessage } from './common/ErrorMessage';
import { useSettings } from '../store/features/settings/hooks/useSettings';
export var App = function (_a) {
    var _debug = _a._debug, className = _a.className, onPageChange = _a.onPageChange, _unsafeForcePage = _a._unsafeForcePage;
    var setDebugMode = useSettings().setDebugMode;
    var _b = useNavigation(), page = _b.page, navigate = _b.navigate;
    // unsafe dev mode flag
    useEffect(function () {
        // Calling onPageChange if defined
        onPageChange && onPageChange(page);
        // Force navigating if _unsafeForcePage is defined
        if (_unsafeForcePage && _unsafeForcePage !== page) {
            console.warn('Warning, _unsafeForcePage prop should only be used during development, force navigating to page: ', _unsafeForcePage);
            navigate(_unsafeForcePage);
        }
    }, [page, _unsafeForcePage]);
    useEffect(function () {
        // Debug mode
        if (_debug) {
            console.warn('Warning, _debug prop should only be used during development, make sure to remove it in production, setting debug mode to true.');
            setDebugMode(_debug);
        }
    }, [_debug]);
    return (_jsxs("div", __assign({ className: className }, { children: [_jsx(Navigator, __assign({ page: Page.INTRO }, { children: _jsx(PageIntro, {}) })), _jsx(Navigator, __assign({ page: Page.TOS }, { children: _jsx(PageTOS, {}) })), _jsx(ErrorMessage, {})] })));
};
