var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { createVeriffFrame } from '@veriff/incontext-sdk';
import { useEffect } from 'react';
import { useAppDispatch, useAppSelector } from '../store/store';
import { setVeriffFrame, updateVeriffStatus, VeriffStatus } from '../store/features/veriff/veriff-response.slice';
import { useNavigation } from '../store/features/navigation/hooks/useNavigation';
import { Page, PageError } from '../store/features/navigation/navigation.slice';
import { useSettings } from '../store/features/settings/hooks/useSettings';
import { PageLayout } from '../components/PageLayout';
export var PageVeriff = function (_a) {
    var children = _a.children;
    // TODO: check isDevelopment functionality to see if it's required by SL.
    var veriffURL = useAppSelector(function (state) { return state.veriffSession.url; });
    var dispatch = useAppDispatch();
    var navigate = useNavigation().navigate;
    var debug = useSettings().debug;
    var startVeriff = function (_a) {
        var url = _a.url;
        // display Veriff
        if (!url) {
            debug && console.error('No Veriff URL');
            return;
        }
        dispatch(updateVeriffStatus(VeriffStatus.PENDING));
        var veriffFrame = createVeriffFrame({
            url: url,
            onEvent: function (msg) {
                return __awaiter(this, void 0, void 0, function () {
                    var message;
                    return __generator(this, function (_a) {
                        message = VeriffStatus[msg];
                        if (message === VeriffStatus.FINISHED) {
                            navigate(Page.VERIFF_STATUS);
                            veriffFrame.close();
                        }
                        else if (message === VeriffStatus.CANCELED) {
                            debug && console.error('Veriff Error', message, msg);
                            navigate(PageError.VERIFF_ERROR);
                            veriffFrame.close();
                        }
                        dispatch(updateVeriffStatus(message));
                        return [2 /*return*/];
                    });
                });
            },
        });
        dispatch(setVeriffFrame(veriffFrame));
    };
    useEffect(function () {
        startVeriff({ url: veriffURL });
    }, []);
    return (_jsxs(PageLayout, { children: [_jsx("div", { "data-id": "page-veriff" }), children] }));
};
