var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import React, { useEffect } from 'react';
import { ethers } from 'ethers';
import { beginApplication, } from '../controllers/api/beginApplication.api';
import { setCustomerId } from '../store/features/auth/auth.slice';
import { useAuth } from '../store/features/auth/hooks/useAuth';
import { useAppDispatch } from '../store/store';
import { Page, PageError } from '../store/features/navigation/navigation.slice';
import { useNavigation } from '../store/features/navigation/hooks/useNavigation';
import { updateVeriffSession } from '../store/features/veriff/veriff-session.slice';
import { setEthereumContract } from '../store/features/ethereum/ethereum-contract.slice';
import { Loader } from '../components/common/Loader';
import { PageLayout } from '../components/PageLayout';
import { useSettings } from '../store/features/settings/hooks/useSettings';
export var PageSignWallet = function (_a) {
    var jwt = _a.jwt, account = _a.account, onSign = _a.onSign, signature = _a.signature, backendUrl = _a.backendUrl, children = _a.children;
    var debug = useSettings().debug;
    var dispatch = useAppDispatch();
    var _b = React.useState(false), loading = _b[0], setLoading = _b[1];
    var customerId = useAuth().customerId;
    var navigate = useNavigation().navigate;
    var handleOnSign = function () {
        var hashedMessage = ethers.utils.arrayify(ethers.utils.keccak256(account));
        onSign(hashedMessage);
    };
    useEffect(function () {
        var handleKYCResponse = function (_a) {
            var veriffSession = _a.veriffSession, contractParameters = _a.contractParameters, error = _a.error;
            if (error) {
                debug && console.error('KYC Response Error: ', error);
                navigate(PageError.KYC_ERROR);
            }
            else if (veriffSession) {
                dispatch(updateVeriffSession({
                    id: veriffSession.id,
                    url: veriffSession.url,
                    vendorData: veriffSession.vendorData,
                    host: veriffSession.host,
                    status: veriffSession.status,
                    sessionToken: veriffSession.sessionToken,
                }));
                navigate(Page.VERIFF);
            }
            else if (contractParameters) {
                dispatch(setEthereumContract({
                    governanceAddress: contractParameters.governanceAddress,
                    contractAddress: contractParameters.address,
                    country: contractParameters.country,
                    aml: contractParameters.aml,
                    did: contractParameters.did,
                    signature: contractParameters.signature,
                    issuedAt: contractParameters.issuedAt,
                    tokenId: contractParameters.tokenId,
                    isBusiness: contractParameters.isBusiness,
                }));
                navigate(Page.MINT_NFT);
            }
        };
        if (signature && !customerId) {
            setLoading(true);
            beginApplication({
                jwt: jwt,
                account: account,
                signature: signature,
                backendUrl: backendUrl,
            })
                .then(function (KYCResponse) {
                dispatch(setCustomerId(KYCResponse.customerId));
                handleKYCResponse(KYCResponse);
                setLoading(false);
            })
                .catch(function (error) {
                debug && console.error('Begin application endpoint error: ', error);
            });
        }
        return function () {
            setLoading(false);
        };
    }, [account, signature, backendUrl, dispatch, jwt, customerId, navigate]);
    return (_jsx(PageLayout, { children: loading ? (_jsx(Loader, { children: children })) : (_jsxs(_Fragment, { children: [_jsx("h1", { children: "Verify your wallet." }), _jsx("section", { children: "Prove ownership of your wallet address by signing a message in your wallet." }), _jsx("section", __assign({ className: "kyc-buttons kyc-buttons-single" }, { children: _jsx("button", __assign({ onClick: handleOnSign, className: "kyc-button kyc-button-primary" }, { children: "Sign Message" })) }))] })) }));
};
